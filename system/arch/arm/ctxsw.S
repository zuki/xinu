/**
 * @file ctxsw.S
 */
/* Embedded Xinu, Copyright (C) 2013.  All rights reserved. */

#include <arm.h>

.text
    .align 4
    .globl ctxsw

/**
 *  @ingroup threads
 *-----------------------------------------------------------------------
 *  ctxsw  -  スレッドコンテキストを切り替える.
 *------------------------------------------------------------------------
 *
 * ARM版のctxswである。動作原理: r4-r11はcalllee-saveのため、lrは
 * 再度このコンテキストに切り替わった際にPCにロードする必要があるため、
 * r4-r11とlrを保存する必要がある。レジスタr0-r3はcaller-saveなので
 * 保存する必要はない。ただし、スレッドの引数を渡すために create() に
 * よって構築されるコンテキストの一部であるため、そのスペースを確保する
 * ためにプッシュされる。
 *
 * コンテキストを復元する際にはlrとpcをポップする。これらの値はcreate()により
 * 適切な値に設定されている。ただし、以下のようにコンテキストを保存する際には
 * 適切な値はpc（すなわち、ctxsw()が復帰するアドレスであるlr）しかセットして
 * いない。その命令時点でのlrは不明である。しかし、lrはcaller-saveであるので
 * これは問題ないので、代わりにr13から適当な値をプッシュしてけばよい。
 *
 * CPSRについてはここではほとんど何もする必要がない。
 *
 *  - コンテキストスイッチはすべて同じモード（SYSモード）で行う。
 *  - ARMのABIはCPSRの比較フラグが関数呼び出しの間保持されることを
 *      期待しない。
 *  - resched()がスイッチアウトされたスレッドを再開する際に割り込みが
 *      有効か否かを保存/復元するように配慮している。
 *  - Xinuは、Thumb命令の実行への切り替えなど、上記ですでにカバーされて
 *      いること以外のCPSRへの変更を行うことがない。
 *
 * しかし、ctxsw()がresched()から呼び出される際、割り込みは無効になっている
 * が、resched()が面倒を見ない*新しい*スレッドを起動する際には割り込みを
 * 有効にしたい。そこで、現在のプログラム状態レジスタの制御ビットを
 * コンテキストに含め、割り込みが有効になるように新しいスレッドの制御
 * ビットを設定するコードをcreate()に追加して解決している。
 *------------------------------------------------------------------------*/
/**
 * @fn void ctxsw(&oldregs, &newregs)
 *
 * 現在のプロセッサの情報を保存して別のプロセスにコンテキスト
 * （レジスタ値）を切り替える. この関数は通常考えられるようには
 * 復帰しない。なぜなら、別のプロセスのスタックポインタをロードし、
 * その場所にジャンプしてコードの実行を開始するからである。
 *
 * @param  oldregs 現プロセスのレジスタ保存領域のアドレス
 * @param  newregs 新プロセスのレジスタ保存領域のアドレス
 * @return 特例。上記参照。
 */
ctxsw:
    .func ctxsw
    mrs r12, cpsr
    push {r0-r14}

    str sp, [r0]
    ldr sp, [r1]

    /* スタックの対応する位置からレジスタをロードする。プログラムが
     * ジャンプするため、プログラムカウンタは最後にロードする必要が
     * ある。この場合、リターンとはプログラムカウンタにリンクレジスタを
     * ロードすることに相当する。
     */

    pop {r0-r12}
    msr cpsr_c, r12

    /* リンクレジスタをプログラムカウンタにロードする。リンクレジスタの
     * 値を変更したため、元の関数には戻らず、別プロセスの新しい関数に
     * 移行する。
     */
    pop {lr, pc}

    .endfunc
