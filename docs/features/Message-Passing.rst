メッセージパッシング
====================

メッセージパッシングはXINUのスレッドがプロセス間通信に使用する方法の
一つです。スレッドはシステムコールの ``send``, ``receive``, ``recvclr``
を使用して他のスレッドにメッセージを送信することができます。
各スレッドにはこの方式で送受信されるメッセージ用にスレッド制御ブロック
内にメッセージ1つ分のメモリが割り当てられています。このメッセージ
パッシングの形をこれもプロセス間通信に使用されるメールボックス
メッセージングキューシステムと混同しないでください。

各スレッドには作成時にこのメッセージパッシングシステムに適用される
2つのフィールド用のメモリがスレッド制御ブロックに割り当てられます。
2つのフィールドは、このスレッドに送信されるメッセージを1つ格納する
4バイト（ ``int`` 型）のメッセージボックスとそのスレッドのメッセージ
ボックスにまだ受信していないメッセージが待機しているか否かを知らせる
1バイトのフラグ（ ``bool`` 型）です。

スレッドは、関数 ``send(tid_typ tid, int msg)``, ``receive()``,
``recvclr()`` を使って、このメッセージパッシングシステムを利用します。

``send(tid_typ tid, int msg)`` は引数 ``msg`` で渡されたメッセージを
同じく引数として渡された ``tid`` をスレッドIDに持つスレッドの
スレッド制御ブロックのメッセージボックスに配信します。 ``send`` は
受信スレッドがメッセージ受信待ちの状態 (``THRRECV``) の場合は
常に reschedule を呼んでプロセッサを明け渡します。

``receive()`` は ``receive`` を呼び出したスレッドのスレッド制御
ブロックのメッセージボックスに待機しているメッセージを返します。
スレッドに待機中のメッセージがない場合、スレッドはメッセージが
渡されるまでメッセージ受信待ちの状態 (``THRRECV``) になります。

``recvclr()``は ``receive()`` のノンブロッキング版です。
``receive`` を呼び出したスレッドのスレッド制御ブロックのメッセージ
ボックスに待機中のメッセージがある場合はそのメッセージを返します。
スレッドに待機中のメッセージがない場合は単に ``OK`` を返し、スレッドに
待機中のメッセージはないことを知らせます。これは ``receive`` を
呼び出したスレッドをブロックせず、常に直ちにメッセージか ``OK`` を
返すに注意してください。
