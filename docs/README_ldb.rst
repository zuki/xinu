Pi用のEmbedded Xinuの大改訂!!!
================================

`https://github.com/LdB-ECM/Xinu <https://github.com/LdB-ECM/Xinu>`__

Embedded Xinu, Copyright (C) 2008, 2009, 2010, 2013, 2018.  All rights reserved.

このコードは普通に動作していますが作業中です。つまり、”アルファ版"です。
機能を失うことなくコードベースに必要な大規模な変更を加えようとしています。
私が取り組んでいることを追跡したいのであれば私は作業を行う度にwikiを更
新しています。

.. contents::
   :local:

0. 概要
-----------------------

ハード/ソフトFPUコンパイル:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

オリジナルのソフトFPUコンパイルだけでなく、ハードFPUコンパイルもできる
ようにコードが変更されています ... 注意事項をご覧ください。

リポジトリのデフォルトではハードフロートが設定されています。
https://github.com/LdB-ECM/Docs_and_Images/blob/master/Documentation/HardSoft_fpu.md

Makefileの変更
^^^^^^^^^^^^^^^

オブジェクトファイルを1つのディレクトリにビルドするようにmakefileを変更し、
クリーンプロセスの高速化を図りました。同時にLinuxサポート家でのmakeも
追加したはずです（未検証）。

私が遭遇して修正したおかしなコードの収集をはじめました
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

https://github.com/LdB-ECM/Docs_and_Images/blob/master/Documentation/Xinu.md

カレントPi動作イメージ（全てのモデルで動作）はいつもいかにあります
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

https://github.com/LdB-ECM/Xinu/blob/master/compile/kernel.img

ARM7 (Pi2)とARM8 (Pi3)の32bitコードのコンパイルをリリース間近に追加
（イーサネットドライバに1つバグあり）しました。FPUはコンテキスト
スイッチャの制約のためにオフラインであり、現時点ではあまりメリットが
ありません。他のバイナリは興味本位からプリコンパイルされていますが、
安定性のためにkernel.imgを使用してください。

1. Xinu 2.0: 良い点、悪い点、ひどい点?
------------------------------------------

良い点
^^^^^^^^

- UNIXから派生したコードは有用性において十分Linuxと類似性を持っています。
- デザインはシンプルで、エレガントとさえ言えます。
- 豊富なドキュメントと教育的な例があります。

悪い点
^^^^^^^^^

- 記憶媒体のサポートがありません。
- コーディングスタンダードのため、特に64bitに移植しようとすると
  リポジトリが厄介なものになります。
- ビルドプロセスにPythonとシェルコマンドがあるのはイライラします。

ひどい点?
^^^^^^^^^^^

- コードが準拠しているC標準がありません。
- 標準Cライブラリが ``stdbool.h`` のように存在しないか
  ``stddef.h`` のように台無しにされています。
- 欠けているC標準関数を代用するためにひどいマクロとコードが
  数多く使われいます。

2. これまでの変更点
---------------------------

1.  C標準の`<stdbool.h>`を作成
2.  ``<stdint.h>`` を修正し、特にAARch64のためにC標準に
    近づけました。
3.  ``stddef.h`` をC標準に戻し、間違ったエントリを ``xinu.h`` に
    入れました。
4.  すべての ``uint``, ``uchar``, ``ulong`` などを徐々に削除し
    標準な型に置き換えています。
5.  サイズ指定のない型はCのプレーンタイプ（ ``unsigned char``,
    ``unsigned int``, ``int`` など）に変更しました。
6.  特定の幅を持つ型は`stdint.h`にある型（ ``uint16_t``,
    ``uint32_t``, ``uint64_t`` ）に変更しました。
7.  デバイスシステムを作り直し、デバイステーブルに自動的にロードするように
    しました。
8.  7項を行うことで ``conf.c`` と ``conf.h`` は単なる最大デバイス容量を持つ空の
    ドライブテーブルになりました。
9.  7項と8項を行うことでソースファイルの作成にpythonを使うのは醜いので
    やめました。
10. makefileシステムからすべてのシェルコマンドを削除しました（makeだけを
    使ってビルドします）。
11. makeとコンパイラだけで正常にビルドできるようになりました。
12. **Pi** の ``start.s`` と ``platforminit.c`` を整理してすべてのモデルで動作する
    ようにしました（不格好だけど）
13. フレームバッファデバイスを修正してすべてのモデルのPiで動作するように
    しました。
14. フレームバッファデバイスを修正して3つのカラーモード: RGB565, RGB,
    RGBAをサポートするようにしました。
15. フレームバッファスクリーンのためにコンソール出力のVT100パーサを追加
    しました。
16. Pi3B+に必要なlan78xxドライバを追加しました。
17. すべてのPiモデル用のGPIOドライバを追加しました。
18. Arm7とArm8 32bitコンパイルに対応しました。
19. ハード\/ソフトFPUコンパイルを追加しました。

.. note::

    12. ドライバ標準を近日中に印刷する予定で、その中でドライバに
    強制することが期待されるものを公開するまでに修正する予定です。

3. 将来の変更予定
--------------------

- [ ] SDとHDDのドライバは完了、FAT32のドライバも完了。マウントと
      コンソールを整理する必要があります。
- [ ] AARCH64ビットのコンパイルはうまくいっていますが、悪いコードに
      よるアライメントバグがいくつかあります。
- [ ] MMUのフルサポートは32/64ともに完了しましたが、やはりバグを
      引き起こす悪いコードが問題です。
- [x] FPUをオンラインにすることはできますがデバッグとチェックが必要です。
- [ ] 多くのプラットフォームでplatformint.cを正しく使用するのではなく、
      cで#defineを使用するようにします。
- [ ] デバイスを共有するドライバディレクトリを整理する必要があります。
      サブディレクトリが望ましいです。
- [ ] マルチプロセッサのタスク/スイッチャシステムを追加する必要があります。
      現在取り組んでいますが、スイッチャとスケジューラーを別のものに置き
      換えるのは難しいことではありません。

4. インスール手順
-----------------------

4.1 ビルド手順
^^^^^^^^^^^^^^^^^^^

O/S用のCコンパイラをダウンロードするのと同じくらい簡単なはずです。
私は下記の「有益なリンク」にあるARM標準ツールセットを使用しています。

使用しているOS用のmake実行ファイル (``make.exe``) をダウンロードします。
WindowsではGNU make 4.21を使用しています。

コンパイラとmakeを置いたバイナリディレクトリをパス環境に配置します。

コマンドコンソールを開き、リポジトリをコピーしたディレクトリから
``compile`` ディレクトリに移動し`make`コマンドを発行します。

ビルドが開始されるはずです :-\)

4.2 ビルドの制御
^^^^^^^^^^^^^^^^^^^^^^

ビルドには2つの重要なコマンドが追加されています。

- ``make clean`` ... コンパイルされた一時的なバイナリオブジェクトファイルを
  すべて削除します。これによりフルビルドを強制的に行います。
- ``make libclean`` ... コンパイルされた一時的なライブラリファイルをすべて
  削除します。これによりライブラリを再構築できるようにします。

どのようなファイルを変更するかによって、時々この2つが必要になります。

5. 有益なリンク
----------------------

- `Armオープンソースの開発ツール <https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads>`__
- `Linuxドライバファイルリポジトリ <https://github.com/torvalds/linux/tree/master/drivers>`__
- `Windows用GNU 4.2.1 Make プリビルドバイナリ <https://github.com/mbuilov/gnumake-windows>`__
