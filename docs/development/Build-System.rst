システムのビルド
==================

|EX| のビルドは簡単で ``compile`` ディレクトリで``make`` とタイプ
するだけです。しかし、ビルドシステムがどのように動作するのかを理解
したいのであれば ``Makefile`` を熟知しておく必要があります。これは
再帰的なビルドプロセスではなく（makeはライブラリのビルドと他の
いくつかの特殊なケースで別のmakeプロセスを呼び出すだけだけす）、
論理的に分割されたコンポーネントをビルドするためのルールを書いた
一つのMakefileであることに注意すべきです。

以下はXINUのtrunk版をビルドするプロセスの説明であり、すべての
バージョンに適用できるわけではありません。

Makefile
--------

``compile/Makefile`` を開くとXINUをビルドするための数多くの変数や
設定を発見できるでしょう。1つ目は ``mipsVarsをインクルード`` する
ディレクティブです。これは単に ``compile/mipsVars`` ファイルの内容を
Makefileに追加するだけです。動的変数を外部ファイルに格納することで
システム間の移動が容易になるようにこのファイルを ``インクルード``
することを選択しました。Makefileの変更は少ないほどよいのです。

``mipsVars`` はクロスコンパイラの場所とCとアセンブリのソースファイルを
コンパイルするための様々なフラグを定義しています。

ローカル設定をインクルードした後は、最終的なコンパイルイメージの名前、
（必要であれば）作成するアーカイブファイル、メインプログラムを配置する
場所、ローダーに渡すフラグ、ファイルの場所などを与える数多くの変数を
設定します。そして、シェルプロンプトで引数なしで ``make``  がタイプ
されたときに呼び出されるデフォルトのmakeターゲットがあります。

次の2つの変数は非常に重要です。 ``COMPS`` はビルド時に含めるべき主要な
システムコンポーネントのリストです。同様に ``LIBS`` はシステムのビルド
時にインクルードするライブラリのリストです。  ``COMPS`` 行から別の
``include`` ディレクティブを使用しています。今回は、各コンポーネントが
指すディレクトリにある ``Makerules`` ファイルをソースとしています。
各Makerulesファイルはそのコンポーネントをカーネルイメージにビルドする
ためのソースファイルを追加します。すべてのソースファイルがロードされる
と、MakefileはCソースファイルとアセンブリファイルのコレクションを変換
してオブジェクトファイルの巨大なリストを作成します。

これですべての重要な変数が設定されました。次は実行可能なターゲットが
多数あります。最も一般的なターゲットは  ``${BOOTIMAGE}`` （通常は、
xinu.boot）です。これは、すべてのオブジェクトファイル、ライブラリ
ファイル、ローダースクリプトに依存します。そして、すべてのオブジェクト
ファイルをリンクしてブートイメージを作成します。また、システム用の
オブジェクトファイルのビルドだけをする（リンクしない）オ ``objects``
ターゲットもあります。

ソースツリーを掃除する方法は複数あります。 ``make clean`` はすべての
オブジェクトファイルとブートイメージを削除します。 ``make libclean``
は、すべてのライブリのためのcleanターゲットを呼び出します。
``make depclean`` はMakefileからヘッダファイルの依存関係をすべて
削除します。 ``make docclean`` は ``make docs`` コマンドで生成された
ドキュメントを削除します。 ``make realclean`` は上記のすべてを行い、
``vn`` ファイルと ``version`` ファイルも同時に削除します。

これらのターゲットのあとにも呼び出すことができる特別なターゲットが
いくつかあります。 ``make [component]`` は指定したサブシステムの
オブジェクトファイルだけを作成します（開発中に便利です）。
``make [libname]`` はライブラリアーカイブをビルドし、
``make [libname]-clean`` はライブラリを掃除します。

Makerules
---------

上で述べたように各コンポーネントディレクトリには ``Makerules``
ファイルが存在します。このファイルはコンポーネントのソースファイルの
リストを追加します。このファイルについては2つの重要な要素があります。

#. ファイルの先頭にコンポーネント名 **と** ディレクトリ名から
   なる ``COMP`` を置きます。
#. ``COMP_SRC`` 変数にすべてのファイルを追加し、ファイルには適切な
   ディレクトリプレフィックスを付けます（そうすることでgccはファイルを
   見つけらることができます）。

Makerulesファイルの中ではソースファイルを適切に分割することが
できます。通常、アセンブリファイルはローカルの ``S_FILES`` 変数に、
Cソースは ``C_FILES`` 変数に格納します。これは厳密には必要ないの
ですが、場合によっては読みやすくなります。

ライブラリ
--------------

XINUのライブラリは再帰的なmakeパラダイムを使用してビルドされます。
ライブラリは通常変更されないので、特別な要求がない限り、ビルドの間に
削除されることはありません。最上位のMakefileでは関連するすべての変数が
エクスポートされ（クロスコンパイラの場所、Cとアセンブリのための
フラグを含む）、ライブラリのMakefileはそれらを使用してファイルを
ビルドし、オブジェクトファイルのアーカイブを作成します。

これにより重要なビルド変数をすべて一箇所に集め、ビルドシステムに
変更があった場合にも依存関係の問題を残さないようにすることができます。
