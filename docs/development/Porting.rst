Embedded Xinuの移植
======================

ビルドシステム
----------------

このセクションではEmbedded Xinuの新たな移植版のビルドシステムを
設定する方法について説明します。

ビルドロジックの大部分は  ``compile/`` にあるMakefileにあります。
このファイルはプラットフォームに依存しないように作成されており、
変更する必要はないはずです。その代わり ``compile/platforms/`` に
新しいディレクトリを作り、そこに新たなプラットフォーム用の  ``platformVars``, ``xinu.conf``, ``ld.script`` の3つのファイルを
置きます。

platformVars
~~~~~~~~~~~~

``platformVars`` はMakefile構文で、以下の定義を含める必要があります。

- ``xinu.elf`` から ``$(BOOTIMAGE)`` ファイル（デフォルトは
  ``xinu.boot`` ）を生成するMakefileルール。 ``xinu.elf`` はELF形式の
  カーネルです。一方、``xinu.boot`` は通常、ビルドの最終結果である
  実際に起動可能なカーネルであることが期待されるものもです。この
  ルールは単にファイルをコピーするか、 **objcopy** を使ってバイナリ
  形式に変更するものです（ターゲットプラットフォーム用の正しい
  **objcopy** を取得するために ``$(OBJCOPY)`` を使用してください）。
  対象のプラットフォームのやり方が大きくお異なる場合は
  ``$(BOOTIMAGE)`` を他のものにオーバーライドすることができます。

- ``APPCOMPS`` にはビルトインするXinuアプリケーションコンポーネントの
  リストを設定する必要があります。このリストの項目は ``network`` の
  ようなトップレベルディレクトリに対応します。 ``lib/`` や ``system/``
  など、特定のトップレベルディレクトリは「アプリケーション」
  コンポーネントとはみなされないため、ここにリストアップしないように
  注意してください。

- ``DEVICES`` にはビルトインするXinuデバイスドライバのリストを設定
  する必要があります。このリストの項目は ``device/`` 配下の
  ディレクトリ名に対応します。多くの場合、ここに追加されたデバイス
  ドライバは ``xinu.conf`` で設定する必要もあります。

- ``BUGFLAG`` にはデバッグ情報を有効にするための適切なコンパイラ
  フラグを設定する必要があります。

- ``ARCH_ROOT`` にはコンパイラバイナリのあるデフォルトのディレクトリ
  （スラッシュで終わる）を設定する必要があります。ビルド時に上書き
  できるので正確な値は重要ではありません。

- ``ARCH_PREFIX`` にはデフォルトのコンパイラターゲットプレフィックスを
  設定する必要があります。

- ``OCFLAGS`` には生のバイナリファイルをカーネルにリンクできる
  オブジェクトファイルに変換する **objcopy** に渡す適切なフラグを
  設定する必要があります。

``platformVars`` では次の定義を変更できます。

- ``FLAGS`` を変更してコンパイラフラグを追加することができます。

- ``ASFLAGS`` を変更してアセンブラフラグを追加することができます。
  これらのフラグは直接アセンブラに渡されるのでこれらの先頭に
  ``-Wa,`` を *つけない* でください。GNUアセンブラで利用可能な
  フラグについては ``man as`` または ``info as`` を参照してください。

- ``LDFLAGS`` を変更してリンカフラグを追加することができます。
  これらはリンカに直接渡されるので、これらの先頭に ``-Wl,`` を
  つけないでください。GNUリンカで利用可能なフラグについては
  ``man ld'` または ``info ld`` を参照してください。

- ``LDLIBS`` を変更して必要な外部ライブラリを追加することができます。
  対象のアーキテクチャが除算のソフトウェアエミュレートを必要とする
  など、特定の互換性のためにlibgcc (``-lgcc``) を追加する可能性の
  他にはおそらくここには何も追加する必要はないでしょう。

- ``INCLUDE`` を変更してインクルードディレクトリを追加することが
  できます。それぞれの前に ``-I`` を付けてください。トップレベルの
  Makefileはこれらを ``CFLAGS`` と ``ASFLAGS``  に適切に追加して
  処理します。特に ``system/platforms/$(PLATFORM)`` がすでに
  デフォルトで追加されているので、ここには何も追加する必要はないで
  しょう。

- ``DEFS`` を変更して定義を追加することができます。それぞれの前に
  ``-D`` を付けてください。トップレベルのMakefileはこれらを
  ``CFLAGS`` と ``ASFLAGS``  に適切に追加して  処理します。既存の
  ソースコードにプラットフォーム固有の条件付きCコードを追加する
  必要がある場合（可能な限り避けてください）は ``_XINU_PLATFORM_???_``
  のような定数を定義する必要があります。ここで ``???`` は対象となる
  プラットフォームです。

さらにさらに、オプションで次の変数を設定することができます。

- ``PLATCLEAN`` には ``make realclean`` が実行されたときに実行
  されるプラットフォーム固有のターゲットの名前を指定します。

- ``LIBXC_OVERRIDE_CFILES`` （説明については :ref:`libxc_overrides`
  を参照してください）。

- ``PLATFORM_NAME`` は生成されるドキュメントの冒頭に置かれる
  リリースを変更するために使用します。

xinu.conf
~~~~~~~~~

``xinu.conf`` はXinuの静的デバイステーブルの設定に使用される
ファイルです。フォーマットについては ``compile/platforms/``
ディレクトリにある既存のサンプルを参照してください。このファイルは
``system/conf.c`` と ``system/conf.h`` の生成に使用されます。
``xinu.conf`` で定義されたデバイスは ``platformVars`` の ``DEVICES``
変数を介して実際にカーネルにコンパイルされるコンポーネントと同期
していなければなりません。

ld.script
~~~~~~~~~

``ld.script`` はカーネルのリンクに使用されるリンカスクリプトです。
これは結果として得られるカーネルイメージのレイアウトのカスタマイズに
使用され、コンパイル後の実行アドレスなどを含みます。
``compile/platforms/`` にある既存の例を参照してください。

アーキテクチャ
~~~~~~~~~~~~~~~~~

複数のXinuプラットフォームがARMやMIPSなどの同じ「アーキテクチャ」を
基盤としている場合があります。対象となるプラットフォームの
アーキテクチャが既に ``compile/arch/`` にある場合は、2つのショート
カットを利用することができます。

- ``platformVars`` は ``compile/arch/`` にある対応する ``platformVars``
  をインクルードすることにより短くすることができます。これは多くの
  定義をあなたに代わって処理します。
- ``compile/platforms/`` にリンカースクリプト (``ld.script``) を
  置かなかった場合は ``compile/arch/`` にリンカースクリプトがあれば
  それが使用されます（これには対応するアーキテクチャの
  ``platformVars`` のインクルードが必要です）。対象のプラットフォーム
  にはこのスクリプトで十分かもしれません。

``compile/arch/`` にある ``platformVars`` の正確な内容は
アーキテクチャによります。既存の例を参照してください。
