BCM283システムタイマー
=========================

**BCM2835システムタイマー** は:doc:`Raspberry-Pi` で採用されている
:doc:`BCM2835` で利用可能なメモリマップドペリフェラルです。1MHzで
動作する64ビットのフリーランニングカウンタと定期的な割り込みに使用
できる4つの独立した「出力コンペアレジスタ」を備えています。ただし、
2つの出力コンペアレジスタはすでにVideoCore GPUが使用しているため、
ARM CPUが使用できるのは2つだけです。

ハードウェア詳細
------------------

BCM2835システムタイマーのインタフェースは物理アドレス ``0x20003000``
から始まる32ビットのメモリマップドレジスタのセットです。

.. list-table:: BCM2835システムタイマーレジスタ
    :widths: 10 10 40
    :header-rows: 1

    * - オフセット
      - 名前
      - 説明
    * - ``+0x00``
      - ``CS``
      - System Timer Control and Status
    * - ``+0x04``
      - ``CLO``
      - System Timer Counter Lower 32 bits
    * - ``+0x08``
      - ``CHI``
      - System Timer Counter Upper 32 bits
    * - ``+0x0C``
      - ``C0``
      - System Timer Compare 0; IRQ line 0に対応
    * - ``+0x10``
      - ``C1``
      - System Timer Compare 1; IRQ line 1に対応
    * - ``+0x14``
      - ``C2``
      - System Timer Compare 2; IRQ line 2に対応
    * - ``+0x18``
      - ``C3``
      - System Timer Compare 3; IRQ line 3に対応

``CLO`` と ``CHI`` は、64ビットのフリーランニングカウンタを形成し、
1MHzの速度で増分し、ソフトウェアはそれを読み取ることで現在のタイマー
ティック数を取得できます。ただし注意点が2つあります。

- 読み込んだデータが別のペリフェラルからのデータと順番が替わらない
  ことを保証するために適切な :doc:`メモリバリア <BCM2835-Memory-Barriers>`
  を挿入する必要があります。
- ``CLO`` の読み出しは1回の32ビットアクセスで行うことができます。
  しかし、 ``CLO`` と ``CHI`` を一緒にアトミックに読み出す方法は今の
  ところありません。これを回避するために完全な64ビット時間が必要な場合は
  ソフトウェアはまず ``CHI`` を読み、次に ``CLO`` を読み、さらに、
  ``CHI`` を読み、``CHI`` が変化していたらリトライします。

システムタイマーを使って割り込みをスケジュールするために、ソフトウェアで
割り込みを発生させる ``CLO`` の値をシステムタイマーコンペアレジスタの
1つに書き込むことができます。ただし、CPUは実際には ``C1`` と ``C3`` しか
使用できません。 ``C0`` と ``C2`` はGPUで使用されているからです。
また、実際に割り込みを受信するには :doc:`BCM2835-Interrupt-Controller`
で対応するIRQラインをあらかじめ有効にしておく必要があります。割り込みを
解除するには ``CS`` のシステムタイマーコンペアレジスタと同じインデックスを
持つビットに1を書き込む必要があります。つまり、 ``C1`` に設定された
割り込みをクリアするには ``CS`` に ``0x20`` を、 ``C3`` に設定された
割り込みをクリアするには ``CS`` に ``0x80`` を書き込む必要があります。

Embedded Xinuでの使用
------------------------

Embedded Xinu (:doc:`XinuPi`)の :doc:`Raspberry-Pi` 移植版では
BCM2835システムタイマーを使って、:doc:`プリエンプティブマルチタスク </features/Preemptive-Multitasking>` の
実装とシステムタイムの保持を行っています。コードは :source:`system/platforms/arm-rpi/timer.c` に
あります。 ``clkcount()`` と ``clkupdate()`` を実装しているだけなので
きわめてシンプルなコードです。
